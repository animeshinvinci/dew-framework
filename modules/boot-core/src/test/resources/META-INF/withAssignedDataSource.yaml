dataSources:
  ds_0: !!com.alibaba.druid.pool.DruidDataSource
    driverClassName: com.mysql.ds.Driver
    url: ds:mysql://mysql.fengdai.org:3306/ds_yaml_0
    username: root
    password: tairan2017!
  ds_1: !!com.alibaba.druid.pool.DruidDataSource
    driverClassName: com.mysql.ds.Driver
    url: ds:mysql://mysql.fengdai.org:3306/ds_yaml_1
    username: root
    password: tairan2017!
tables:
  t_order:
    actualDataNodes: ds_${0..1}.t_order_${0..1}
    #generateKeyColumns:
      #- columnName: order_id
    tableStrategy:
      inline:
        shardingColumn: order_id
        #algorithmClassName: 分表算法全类名，该类需使用默认的构造器或者提供无参数的构造器，与algorithmExpression出现一个即可
        algorithmInlineExpression: t_order_${order_id.longValue() % 2}
  t_order_item:
    actualDataNodes: ds_${0..1}.t_order_item_${0..1}
    #绑定表中其余的表的策略与第一张表的策略相同
    tableStrategy:
      inline:
        shardingColumn: order_id
        #algorithmClassName: 分表算法全类名，该类需使用默认的构造器或者提供无参数的构造器，与algorithmExpression出现一个即可
        algorithmInlineExpression: t_order_item_${order_id.longValue() % 2}
bindingTables:
  - t_order,t_order_item

#默认数据库分片策略
defaultDatabaseStrategy:
  inline:
    shardingColumn: user_id
    #algorithmClassName: 分表算法全类名，该类需使用默认的构造器或者提供无参数的构造器，与algorithmExpression出现一个即可
    algorithmInlineExpression: ds_${user_id.longValue() % 2}


props:
  sql.show: true