spring:
  application:
    name: sharding-example
  datasource:
    driverClassName: com.mysql.jdbc.Driver
    url: jdbc:mysql://localhost:3306/ds_yaml_1
    username: root
    password: 123456
    type: com.alibaba.druid.pool.DruidDataSource
sharding:
  enabled: true
  jdbc:
    datasource:
      names: ds_0,ds_1
      ds_0:
        type: com.alibaba.druid.pool.DruidDataSource
        driverClassName: com.mysql.jdbc.Driver
        url: jdbc:mysql://localhost:3306/ds_yaml_0
        username: root
        password: 123456
      ds_1:
        type: com.alibaba.druid.pool.DruidDataSource
        driverClassName: com.mysql.jdbc.Driver
        url: jdbc:mysql://localhost:3306/ds_yaml_1
        username: root
        password: 123456
    config:
      sharding:
        tables:
          t_order:
            actualDataNodes: ds_${0..1}.t_order_${0..1}
            #generateKeyColumns:
              #- columnName: order_id
            tableStrategy:
              inline:
                shardingColumn: order_id
                algorithmExpression: t_order_${order_id.longValue() % 2}
          t_order_item:
            actualDataNodes: ds_${0..1}.t_order_item_${0..1}
            tableStrategy:
              inline:
                shardingColumn: order_id
                algorithmExpression: t_order_item_${order_id.longValue() % 2}
        #绑定表中其余的表的策略与第一张表的策略相同
        bindingTables:
          - t_order,t_order_item
        #默认数据库分片策略
        defaultDatabaseStrategy:
          inline:
            shardingColumn: user_id
            algorithmExpression: ds_${user_id.longValue() % 2}
        props:
          sql:
            show: true
